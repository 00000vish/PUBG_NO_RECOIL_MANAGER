//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PUBG_NO_RECOIL_MANAGER.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.7.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string profilePath {
            get {
                return ((string)(this["profilePath"]));
            }
            set {
                this["profilePath"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("--------------------------------------------------------------------------\r\n-----" +
            "-----------        Basic Setting       ------------------------------\r\n---------" +
            "-----------------------------------------------------------------\r\n\r\n---- key bi" +
            "nd ----\r\n\r\nlocal ump9_key = nil\r\nlocal akm_key = 5\r\nlocal m16a4_key = 7\r\nlocal m" +
            "416_key = 8\r\nlocal scarl_key = nil\r\nlocal uzi_key = nil\r\nlocal qbz_key = 4\r\nloca" +
            "l set_off_key = 6\r\n\r\n---- keyboard ---- Only Support logitech G Keyboard\r\n\r\nloca" +
            "l ump9_gkey = 1  ---1 is use F1.\r\nlocal akm_gkey = nil\r\nlocal m16a4_gkey = nil\r\n" +
            "local m416_gkey = nil\r\nlocal scarl_gkey = 3\r\nlocal uzi_gkey = 2\r\nlocal qbz_gkey " +
            "= nil\r\nlocal set_off_gkey = nil\r\n\r\n---- control_key ----\r\n\r\nlocal control_key = " +
            "\"lctrl\" \r\n\r\n---- can use \"lalt\", \"ralt\", \"alt\"  \"lshift\", \"rshift\", \"shift\"  \"lc" +
            "trl\", \"rctrl\", \"ctrl\"\r\n\r\nlocal ignore_key = \"lalt\" --- ignore key\r\nlocal hold_br" +
            "eath_key = \"lshift\"\r\n\r\n--- fastloot setting---\r\n--- Press controlkey and and ign" +
            "ore_key and click Left mouse button ---\r\n--- \"lctrl\" + \"lalt\" + mousebutton\r\n\r\nl" +
            "ocal control_key = \"lctrl\" \r\nlocal fastloot = true ---if you don\'t need it, you " +
            "can close it by true to false.\r\nlocal move = 40 ----1920*1080\r\n\r\n---- only can u" +
            "se \"numlock\", \"capslock\", \"scrolllock\"\r\n\r\nlocal full_mode_key = \"numlock\"   ---n" +
            "umlock lamp on,recoil is full_mode.\"numlock\" \r\nlocal mode_switch_key = \"capslock" +
            "\" \r\nlocal lighton_key = \"scrolllock\"  ---start script,scrolllock lamp will be on" +
            ".close script ,scrolllock lamp will be off.\r\n\r\n--- Your Sensitivity in Game \r\n\r\n" +
            "local vertical_sensitivity = 0.7 --- default is 0.7\r\nlocal target_sensitivity = " +
            "50 --- default is 50.0\r\nlocal scope_sensitivity = 50 --- default is 50.0\r\nlocal " +
            "scope4x_sensitivity = 50 --- default is 50.0\r\n\r\n-- you can close these by true t" +
            "o false\r\n\r\nlocal hold_breath_mode = true\r\nlocal full_mode = true\r\n\r\n---- Obfs se" +
            "tting\r\n-- local obfs_mode = false\r\nlocal obfs_mode = false\r\nlocal interval_ratio" +
            " = 0.75\r\nlocal random_seed = 1\r\n\r\nlocal auto_reloading = false\r\n\r\n-- if auto_mod" +
            "e = true ,the guns need to switch automatic shooting mode,except m16 single.\r\n\r\n" +
            "local auto_mode = true\r\n--------------------------------------------------------" +
            "------------------\r\n----------------        Recoil Table        ----------------" +
            "--------------\r\n---------------- You can fix the value here --------------------" +
            "----------\r\n--------------------------------------------------------------------" +
            "------\r\n--- recoil times\r\n--- if the Recoil compensation is Large or small，You c" +
            "an modify the value of all_recoil_Times or recoil_table{times}\r\nlocal all_recoil" +
            "_times = 1\r\n\r\nlocal recoil_table = {}\r\n\r\nrecoil_table[\"akm\"] = {\r\n    basic={60." +
            "3,40.2,47.5,51.0,54.5, 64.0,67.5,69.0,70.5,71.9, 71.5,73.6,79.3,79.3,81.6 ,70},\r" +
            "\n    basictimes = 1,\r\n    full={61.3,41.2,47.5,51.0,54.5, 64.0,67.5,69.0,70.5,71" +
            ".9, 71.5,73.6,79.3,79.3,81.6 ,80},\r\n    fulltimes = 1*0.75,\r\n    quadruple={61.3" +
            ",41.2,47.5,51.0,54.5, 64.0,67.5,69.0,70.5,71.9, 71.5,73.6,79.3,79.3,81.6 ,80},\r\n" +
            "    quadrupletimes = 4*1,\r\n    fullof4x={61.3,41.2,47.5,51.0,54.5, 64.0,67.5,69." +
            "0,70.5,71.9, 71.5,73.6,79.3,79.3,81.6 ,80},\r\n    fullof4xtimes = 4*1*0.75,\r\n    " +
            "speed = 100,\r\n    maxbullets = 40,\r\n    holdbreathtimes = 1.25,\r\n    fullholdbre" +
            "athtimes = 1.25,\t\r\n}\r\n\r\nrecoil_table[\"m416\"] = {\r\n    basic={52.0,39.5,41.0,43.0" +
            ",48.0, 50.0,53.2,54.2,54.5,52.5, 55.5,54.8,58.6,58.6,59.5, 70.3},\t\r\n    basictim" +
            "es = 1,\r\n    full={52.0,39.5,41.0,43.0,48.0, 50.0,53.2,53.2,53.5,51.5, 51.5,54.8" +
            ",58.6,58.6,59.5, 60.3},\r\n    fulltimes = 1*0.75,\t\r\n    quadruple={52.0,39.5,41.0" +
            ",43.0,48.0, 50.0,53.2,53.2,53.5,51.5, 51.5,54.8,58.6,58.6,59.5, 60.3},\r\n    quad" +
            "rupletimes = 4*1*0.9,\r\n    fullof4x={52.0,39.5,41.0,43.0,48.0, 50.0,53.2,53.2,53" +
            ".5,51.5, 51.5,54.8,58.6,58.6,59.5, 60.3},\r\n    fullof4xtimes = 4*1*0.75,\r\n    sp" +
            "eed = 90,\r\n    maxbullets = 40,\r\n    holdbreathtimes = 1.25,\r\n    fullholdbreath" +
            "times = 1.25,\t\r\n}\r\n\r\nrecoil_table[\"scarl\"] = {\r\n    basic={56.0,26.0,32.0,40.0,4" +
            "5.1, 48.9,51.0,54.2,59.8,60.4, 60.9,60.9,58.9,56.9,59.8, 60.5},\r\n    basictimes " +
            "= 1,\r\n    full={56.0,26.0,32.0,40.0,45.1, 48.9,51.0,54.2,59.8,60.4, 60.9,60.9,58" +
            ".9,56.9,59.8, 60.5},\r\n    fulltimes = 1*0.75,\r\n    quadruple={56.0,26.0,32.0,40." +
            "0,45.1, 48.9,51.0,54.2,59.8,60.4, 60.9,60.9,58.9,56.9,59.8, 60.5},\r\n    quadrupl" +
            "etimes = 4*1,\r\n    fullof4x={56.0,26.0,32.0,40.0,45.1, 48.9,51.0,54.2,59.8,60.4," +
            " 60.9,60.9,58.9,56.9,59.8, 60.5},\r\n    fullof4xtimes = 4*1*0.75,\r\n    speed = 10" +
            "0,\r\n    maxbullets = 40,\r\n    holdbreathtimes = 1.25,\r\n    fullholdbreathtimes =" +
            " 1.25,\t\r\n}\r\n\r\nrecoil_table[\"qbz\"] = {\r\n    basic={52.0,25.0,28.7,38.2,42.4, 44.0" +
            ",46.0,46.0,45.6,45.1, 48.0,51.3,52.0,54.0,56.0, 59},\r\n    basictimes = 1.05,\r\n  " +
            "  full={51.2,24.5,28.7,38.2,42.4, 43.3,45.2,45.2,45.6,45.1, 48.0,50.3,51.0,53.0," +
            "55.0},\r\n    fulltimes = 1*0.75,\r\n    quadruple={51.2,24.5,28.7,38.2,42.4, 43.3,4" +
            "5.2,45.2,45.6,45.1, 48.0,50.3,51.0,53.0,55.0},\r\n    quadrupletimes = 4*1,\r\n    f" +
            "ullof4x={51.2,24.5,28.7,38.2,42.4, 43.3,45.2,45.2,45.6,45.1, 48.0,50.3,51.0,53.0" +
            ",55.0},\r\n    fullof4xtimes = 4*1*0.75,\r\n    speed = 90,\r\n    maxbullets = 40,\r\n " +
            "   holdbreathtimes = 1.25,\r\n    fullholdbreathtimes = 1.25,\t\r\n}\r\n\r\nrecoil_table[" +
            "\"ump9\"] = {\r\n    basic={33.5,19.2,30.5,35.7,39.3, 39.0,38.7,40.2,41.8,44.0, 43.8" +
            ",43.8,46.5,44.5,47.5},\r\n    basictimes = 1.05,\r\n    full={33.5,19.2,30.5,35.7,39" +
            ".3, 39.0,38.7,40.2,41.8,44.0, 43.8,43.8,46.5,44.5,47.5},\r\n    fulltimes = 0.75*0" +
            ".9,\r\n    quadruple={33.5,19.2,30.5,35.7,39.3, 39.0,38.7,40.2,41.8,44.0, 43.8,43." +
            "8,46.5,44.5,47.5},\r\n    quadrupletimes = 4*1*0.97,\r\n    fullof4x={33.5,19.2,30.5" +
            ",35.7,39.3, 39.0,38.7,40.2,41.8,44.0, 43.8,43.8,46.5,44.5,47.5},\r\n    fullof4xti" +
            "mes = 4*0.75,\r\n    speed = 90,\r\n    maxbullets = 40,\r\n    holdbreathtimes = 1.25" +
            ",\r\n    fullholdbreathtimes = 1.25,\t\r\n}\r\n\r\nrecoil_table[\"uzi\"] = { \r\n    basic={1" +
            "6.0,16.0,16.0,17.6,18.6, 20.4,22.4,22.9,25.8,27.6, 32.6,36.9,38.0,38.8,39.8,40.5" +
            "},\r\n    basictimes = 1.15,\r\n    full={16.0,16.0,16.0,17.6,18.6, 20.4,22.4,22.9,2" +
            "5.8,27.6, 32.6,36.9,38.0,38.8,39.8,40.5},\r\n    fulltimes = 1.15*0.75*0.75,\r\n    " +
            "quadruple={16.0,16.0,16.0,17.6,18.6, 20.4,22.4,22.9,25.8,27.6, 32.6,36.9,38.0,38" +
            ".8,39.8,40.5},\r\n    quadrupletimes = 1.15,\r\n    fullof4x={16.0,16.0,16.0,17.6,18" +
            ".6, 20.4,22.4,22.9,25.8,27.6, 32.6,36.9,38.0,38.8,39.8,40.5},\r\n    fullof4xtimes" +
            " = 1.15*0.75*0.75,\r\n    speed = 48,\r\n    maxbullets = 35,\r\n    holdbreathtimes =" +
            " 1.25,\r\n    fullholdbreathtimes = 1.25,\t\r\n}\r\n\r\nrecoil_table[\"m16a4\"] = {\r\n    ba" +
            "sic={41.9,36.5,37.1,50.5,55.9, 62.9,66.9,69.5,69.5,70.0, 71.2,},\r\n    basictimes" +
            " = 1.05,\r\n    full={41.9,36.5,37.1,50.5,55.9, 62.9,66.9,69.5,69.5,70.0, 71.2,},\r" +
            "\n    fulltimes = 1*0.77,\r\n    quadruple={41.9,36.5,37.1,50.5,55.9, 62.9,66.9,69." +
            "5,69.5,70.0, 71.2,},\r\n    quadrupletimes = 1*4,\r\n    fullof4x={41.9,36.5,37.1,50" +
            ".5,55.9, 62.9,66.9,69.5,69.5,70.0, 71.2,},\r\n    fullof4xtimes = 4*1*0.75,\r\n    s" +
            "peed = 75,\r\n    maxbullets = 40,\r\n    clickspeed = 40,\r\n    holdbreathtimes = 1." +
            "25,\r\n    fullholdbreathtimes = 1.25,\t\r\n}\r\n\r\nrecoil_table[\"none\"] = {\r\n    basic=" +
            "{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" +
            "},\r\n    basictimes = 1,\r\n    full={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" +
            ",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},\r\n    fulltimes = 1,\r\n    quadruple={0,0,0,0" +
            ",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},\r\n    " +
            "quadrupletimes = 1,\r\n    fullof4x={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" +
            ",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},\r\n    fullof4xtimes = 1,\r\n    speed = 30,\r\n " +
            "   maxbullets = 40,\r\n    clickspeed = 40,\r\n    holdbreathtimes = 1.25,\r\n    full" +
            "holdbreathtimes = 1.25,\t\r\n}\r\n\r\n-------------------------------------------------" +
            "-------------------------\r\n----------------          Function          ---------" +
            "---------------------\r\n---------------------------------------------------------" +
            "-----------------\r\n\r\n\r\nfunction convert_sens(unconvertedSens) \r\n    return 0.002" +
            " * math.pow(10, unconvertedSens / 50)\r\nend\r\n\r\nfunction calc_sens_scale(sensitivi" +
            "ty)\r\n    return convert_sens(sensitivity)/convert_sens(50)\r\nend\r\n\r\nlocal target_" +
            "scale = calc_sens_scale(target_sensitivity)\r\nlocal scope_scale = calc_sens_scale" +
            "(scope_sensitivity)\r\nlocal scope4x_scale = calc_sens_scale(scope4x_sensitivity)\r" +
            "\n\r\nfunction recoil_mode()\r\n    if not IsKeyLockOn(mode_switch_key) then\r\n       " +
            " if IsKeyLockOn(full_mode_key) and full_mode then\r\n\t       return \"full\";\r\n\telse" +
            "\r\n\t       return \"basic\";\r\n        end\r\n    end\t\r\n\t\r\n    if IsKeyLockOn(mode_swi" +
            "tch_key) then\r\n        if IsKeyLockOn(full_mode_key) and full_mode then\r\n\t      " +
            " return \"fullof4x\"\r\n\telse\r\n\t       return \"quadruple\"\r\n        end \r\n    end\t\t\r\n" +
            "end\r\n\r\nfunction single_value(value)\r\n    return 10 * math.floor(( value / 10 ) +" +
            " 0.9)\r\n    end\r\n\r\nfunction recoil_value(_weapon,_duration)\r\n    local _mode = re" +
            "coil_mode()\r\n    local step = (math.floor(_duration/recoil_table[_weapon][\"speed" +
            "\"])) + 1\r\n    if step > #recoil_table[_weapon][_mode] then\r\n        step = #reco" +
            "il_table[_weapon][_mode]\r\n    end\r\n\r\n    local weapon_recoil = recoil_table[_wea" +
            "pon][_mode][step]\r\n    local weapon_speed = recoil_table[_weapon][\"speed\"]\r\n    " +
            "local weapon_clickspeed = recoil_table[_weapon][\"clickspeed\"]\r\n    local weapon_" +
            "maxbullets = recoil_table[_weapon][\"maxbullets\"]\r\n    local weapon_basictimes = " +
            "recoil_table[_weapon][\"basictimes\"]\r\n    local weapon_fulltimes = recoil_table[_" +
            "weapon][\"fulltimes\"]\r\n    local weapon_quadrupletimes = recoil_table[_weapon][\"q" +
            "uadrupletimes\"]\r\n    local weapon_fullof4xtimes = recoil_table[_weapon][\"fullof4" +
            "xtimes\"]\r\n    local weapon_holdbreathtimes = recoil_table[_weapon][\"holdbreathti" +
            "mes\"]\r\n    local weapon_fullofholdbreathtimes = recoil_table[_weapon][\"fullholdb" +
            "reathtimes\"]\r\n    local weapon_intervals = weapon_speed    \r\n    local weapon_cl" +
            "icktime = weapon_clickspeed\r\n    local weapon_bullets = weapon_maxbullets \r\n\r\n  " +
            "  if obfs_mode then\r\n        local coefficient = interval_ratio * ( 1 + random_s" +
            "eed * math.random())\r\n        weapon_intervals = math.floor(coefficient  * weapo" +
            "n_speed) \r\n    end\r\n    -- OutputLogMessage(\"weapon_intervals = %s\\n\", weapon_in" +
            "tervals)\r\n\r\n    recoil_recovery = weapon_recoil\r\n    recoil_times = all_recoil_t" +
            "imes * 0.7 / vertical_sensitivity \r\n\r\n    if recoil_mode() == \"basic\" and not Is" +
            "ModifierPressed(hold_breath_key) then\r\n    recoil_recovery = recoil_recovery * r" +
            "ecoil_times * weapon_basictimes\r\n    end\r\n    if recoil_mode() == \"basic\" and ho" +
            "ld_breath_mode and IsModifierPressed(hold_breath_key) then\r\n    recoil_recovery " +
            "= recoil_recovery * weapon_holdbreathtimes * recoil_times * weapon_basictimes\r\n " +
            "   end\r\n\r\n    if recoil_mode() == \"full\" and not IsModifierPressed(hold_breath_k" +
            "ey) then\r\n    recoil_recovery = recoil_recovery * recoil_times * weapon_fulltime" +
            "s\r\n    end\r\n    if recoil_mode() == \"full\" and hold_breath_mode and IsModifierPr" +
            "essed(hold_breath_key) then\r\n    recoil_recovery = recoil_recovery * weapon_full" +
            "ofholdbreathtimes * recoil_times * weapon_fulltimes\r\n    end\r\n\r\n    if recoil_mo" +
            "de() == \"quadruple\" then\r\n    recoil_recovery = recoil_recovery * recoil_times *" +
            " weapon_quadrupletimes\r\n    end\r\n\t\r\n    if recoil_mode() == \"fullof4x\" then\r\n   " +
            " recoil_recovery = recoil_recovery * recoil_times * weapon_fullof4xtimes\r\n    en" +
            "d\r\n\r\n    -- issues/3\r\n    if IsMouseButtonPressed(2) then\r\n        recoil_recove" +
            "ry = recoil_recovery / target_scale\r\n    elseif recoil_mode() == \"basic\" then\r\n " +
            "       recoil_recovery = recoil_recovery / scope_scale \r\n    elseif recoil_mode(" +
            ") == \"full\" then\r\n        recoil_recovery = recoil_recovery / scope_scale\r\n    e" +
            "lseif recoil_mode() == \"quadruple\" then\r\n        recoil_recovery = recoil_recove" +
            "ry / scope4x_scale\r\n    elseif recoil_mode() == \"fullof4x\" then\r\n        recoil_" +
            "recovery = recoil_recovery / scope4x_scale\r\n    end\r\n\r\n    return weapon_interva" +
            "ls,recoil_recovery,weapon_clicktime,weapon_bullets\r\nend\r\n\r\n---------------------" +
            "-----------------------------------------------------\r\n----------------         " +
            " OnEvent          ------------------------------\r\n------------------------------" +
            "--------------------------------------------\r\n\r\n\r\nfunction OnEvent(event, arg)\r\n" +
            "    OutputLogMessage(\"event = %s, arg = %d\\n\", event, arg)\r\n    if (event == \"PR" +
            "OFILE_ACTIVATED\") then\r\n        EnablePrimaryMouseButtonEvents(true)\r\n        Fi" +
            "re = false\r\n        current_weapon = \"none\"\r\n        shoot_duration = 0.0\r\n     " +
            "   if IsKeyLockOn(lighton_key) then\r\n        PressAndReleaseKey(lighton_key)\r\n  " +
            "      elseif IsKeyLockOn(full_mode_key) then\r\n        PressAndReleaseKey(full_mo" +
            "de_key)\r\n        elseif IsKeyLockOn(mode_switch_key) then\r\n        PressAndRelea" +
            "seKey(mode_switch_key)\r\n        end\r\n    elseif event == \"PROFILE_DEACTIVATED\" t" +
            "hen\r\n        ReleaseMouseButton(1)\r\n    end\r\n\r\n    if (event == \"MOUSE_BUTTON_PR" +
            "ESSED\" and arg == set_off_key) \r\n    or (event == \"G_PRESSED\" and arg == set_off" +
            "_gkey) then\r\n        current_weapon = \"none\" \r\n    elseif (event == \"MOUSE_BUTTO" +
            "N_PRESSED\" and arg == akm_key)\r\n    or (event == \"G_PRESSED\" and arg == akm_gkey" +
            ") then\r\n        current_weapon = \"akm\" \r\n    elseif (event == \"MOUSE_BUTTON_PRES" +
            "SED\" and arg == m16a4_key)\r\n    or (event == \"G_PRESSED\" and arg == m16a4_gkey) " +
            "then\r\n        current_weapon = \"m16a4\" \r\n    elseif (event == \"MOUSE_BUTTON_PRES" +
            "SED\" and arg == m416_key)\r\n    or (event == \"G_PRESSED\" and arg == m416_gkey) th" +
            "en\r\n        current_weapon = \"m416\" \r\n    elseif (event == \"MOUSE_BUTTON_PRESSED" +
            "\" and arg == ump9_key)\r\n    or (event == \"G_PRESSED\" and arg == ump9_gkey) then\r" +
            "\n        current_weapon = \"ump9\" \r\n    elseif (event == \"MOUSE_BUTTON_PRESSED\" a" +
            "nd arg == uzi_key)\r\n    or (event == \"G_PRESSED\" and arg == uzi_gkey) then\r\n    " +
            "    current_weapon = \"uzi\" \r\n    elseif (event == \"MOUSE_BUTTON_PRESSED\" and arg" +
            " == scarl_key)\r\n    or (event == \"G_PRESSED\" and arg == scarl_gkey) then\r\n      " +
            "  current_weapon = \"scarl\" \r\n    elseif (event == \"MOUSE_BUTTON_PRESSED\" and arg" +
            " == qbz_key)\r\n    or (event == \"G_PRESSED\" and arg == qbz_gkey) then\r\n        cu" +
            "rrent_weapon = \"qbz\" \r\n\t\t\r\n    elseif (event == \"M_RELEASED\" and arg == 3 and Fi" +
            "re) then\r\n        local intervals,recovery,clicktime,bullets = recoil_value(curr" +
            "ent_weapon,shoot_duration)\r\n        if shoot_duration % (single_value(intervals)" +
            " / 2) == 0 then\r\n            PressAndReleaseMouseButton(1)\r\n        end \r\n      " +
            "  MoveMouseRelative(0, recovery / 10)\r\n        Sleep(single_value(intervals)/10)" +
            "\r\n        shoot_duration = shoot_duration + (single_value(intervals)/10)\r\n      " +
            "  if auto_reloading then\r\n            if shoot_duration > (single_value(interval" +
            "s) * bullets) + 100 then\r\n            ReleaseMouseButton(1)\r\n            PressAn" +
            "dReleaseKey(\"r\")\r\n            Sleep(200)\r\n            Fire = false\r\n            " +
            "end\r\n        end\r\n        if not Fire then\r\n            ReleaseMouseButton(1)\r\n " +
            "       elseif Fire then\r\n            SetMKeyState(3)\r\n        end\r\n\r\n    elseif " +
            "(event == \"MOUSE_BUTTON_PRESSED\" and arg == 1) then\r\n        -- button 1 : Shoot" +
            "\r\n        if ((current_weapon == \"none\") or IsModifierPressed(ignore_key)) then\r" +
            "\n            PressMouseButton(1)\r\n            repeat\r\n                Sleep(30)\r" +
            "\n            until not IsMouseButtonPressed(1)\r\n        elseif(current_weapon ==" +
            " \"m16a4\") then\r\n            Fire = true\r\n            SetMKeyState(3)\r\n        el" +
            "se\r\n            if auto_mode then\r\n            repeat\r\n            local interva" +
            "ls,recovery,clicktime,bullets = recoil_value(current_weapon,shoot_duration)\r\n   " +
            "         MoveMouseRelative(0, recovery /10 )\r\n            Sleep(intervals/10)\r\n " +
            "           shoot_duration = shoot_duration + (intervals/10)\r\n            if auto" +
            "_reloading then\r\n               if shoot_duration > (intervals * bullets) + 100 " +
            "then\r\n               ReleaseMouseButton(1)\r\n               PressAndReleaseKey(\"r" +
            "\")\r\n               Sleep(200)\r\n               end\r\n            end\r\n            " +
            "until not IsMouseButtonPressed(1)\r\n            else\r\n            Fire = true\r\n  " +
            "          SetMKeyState(3)\r\n            end\r\n        end\r\n    elseif (event == \"M" +
            "OUSE_BUTTON_RELEASED\" and arg == 1) then\r\n        Fire = false\r\n        shoot_du" +
            "ration = 0.0\r\n    end\r\n\r\n    while (event == \"MOUSE_BUTTON_PRESSED\" and arg == 1" +
            " and IsModifierPressed(control_key) and IsModifierPressed(ignore_key) and fastlo" +
            "ot) do\r\n        ReleaseMouseButton(1)\r\n        PressMouseButton(1)\r\n        for " +
            "i = 0, 14 do\r\n        MoveMouseRelative(move, 0)\r\n        Sleep(2)\r\n        end\r" +
            "\n        ReleaseMouseButton(1)\r\n        for i = 0, 14 do\r\n        MoveMouseRelat" +
            "ive(-move, 0)\r\n        Sleep(2)\r\n        end\r\n        Sleep(10)          \r\n    e" +
            "nd\r\n    if (current_weapon == \"none\") then\r\n        if IsKeyLockOn(lighton_key) " +
            "then\r\n        PressAndReleaseKey(lighton_key)\r\n        end \r\n    else\r\n        i" +
            "f not IsKeyLockOn(lighton_key) then\r\n        PressAndReleaseKey(lighton_key)\r\n  " +
            "      end\r\n    end\r\nend")]
        public string pubgScript {
            get {
                return ((string)(this["pubgScript"]));
            }
            set {
                this["pubgScript"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        public string mouseActivate {
            get {
                return ((string)(this["mouseActivate"]));
            }
            set {
                this["mouseActivate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5")]
        public string mouseDisable {
            get {
                return ((string)(this["mouseDisable"]));
            }
            set {
                this["mouseDisable"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.7")]
        public string verticalSen {
            get {
                return ((string)(this["verticalSen"]));
            }
            set {
                this["verticalSen"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("50")]
        public string targetSen {
            get {
                return ((string)(this["targetSen"]));
            }
            set {
                this["targetSen"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("50")]
        public string scopeSen {
            get {
                return ((string)(this["scopeSen"]));
            }
            set {
                this["scopeSen"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("50")]
        public string scopeFourSen {
            get {
                return ((string)(this["scopeFourSen"]));
            }
            set {
                this["scopeFourSen"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("F2")]
        public string gunSwitchKey {
            get {
                return ((string)(this["gunSwitchKey"]));
            }
            set {
                this["gunSwitchKey"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool closeWithPUBG {
            get {
                return ((bool)(this["closeWithPUBG"]));
            }
            set {
                this["closeWithPUBG"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool openWithPUBG {
            get {
                return ((bool)(this["openWithPUBG"]));
            }
            set {
                this["openWithPUBG"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("F3")]
        public string gunDisableKey {
            get {
                return ((string)(this["gunDisableKey"]));
            }
            set {
                this["gunDisableKey"] = value;
            }
        }
    }
}
